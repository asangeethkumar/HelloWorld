# This workflow will build a docker container, publish it to IBM Container Registry, and deploy it to IBM when there is a push to the "main" branch.
#
# To configure this workflow:


name: Build and Deploy IBM WORKS

on:
 workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'warning'
      tags:
        description: 'Test scenario tags'
      password:
            type: environment

# Environment variables available to all jobs and steps in this workflow
env:
  GITHUB_SHA: ${{ github.sha }}
  IBM_CLOUD_API_KEY: ${{ secrets.IBM_API_KEY }}
  IBM_CLOUD_REGION: ${{ secrets.REGION }}
  ICR_NAMESPACE: ${{ secrets.CLUSTER }}
  REGISTRY_HOSTNAME: ${{ secrets.REGISTRY }}
  IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
  IKS_CLUSTER: ${{ secrets.IKS_CLUSTER }}
  DEPLOYMENT_NAME: ${{ secrets.IMAGE_NAME }}
  INPUT_TAGS : ${{inputs.tags}}
  INPUT_LOGLEVEL : ${{inputs.loglevel}}
  PORT: 5001
  yUNAME : ${{ secrets.II_USERNAME }}

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    # Download and Install IBM Cloud CLI
    - name: Install IBM Cloud CLI
      run: |
        curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
        ibmcloud --version
        ibmcloud config --check-version=false
        ibmcloud plugin install -f kubernetes-service
        ibmcloud plugin install -f container-registry

    # Authenticate with IBM Cloud CLI
    - name: Authenticate with IBM Cloud CLI
      run: |
        ibmcloud login -r eu-de --apikey "${IBM_CLOUD_API_KEY}"
        ibmcloud cr region-set "${IBM_CLOUD_REGION}"
        ibmcloud cr login
        
    - name: Call a Bash Script
      run:  bash ${GITHUB_WORKSPACE}/printecho.sh

    # Build the Docker image
    - name: Build with Docker
      run: |
        docker build -t "$REGISTRY_HOSTNAME"/"$ICR_NAMESPACE"/"$IMAGE_NAME":"$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" .

    # Push the image to IBM Container Registry
    - name: Push the image to ICR
      run: |
        docker push "$REGISTRY_HOSTNAME"/"$ICR_NAMESPACE"/"$IMAGE_NAME":"$GITHUB_SHA"

    # Deploy the Docker image to the IKS cluster
    - name: Deploy to IKS
      run: |
        ibmcloud ks cluster config --cluster $IKS_CLUSTER
        kubectl config current-context
        kubectl create deployment $DEPLOYMENT_NAME --image=$REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA --dry-run -o yaml > deployment.yaml
        kubectl apply -f deployment.yaml
        #kubectl rollout status deployment/$DEPLOYMENT_NAME
        #kubectl create service loadbalancer $DEPLOYMENT_NAME --tcp=80:$PORT --dry-run -o yaml > service.yaml
        #kubectl apply -f service.yaml
        #kubectl get services -o wide
